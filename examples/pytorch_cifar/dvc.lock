schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar10
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: output
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar10
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0.0
              - 1.0
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar10
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 20
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: output/data/data.pkl
      md5: 6503fed5d4e6cc1163898c0ab6a863dd
      size: 739680311
    - path: output/models/model.optimizer.pt
      md5: f5b6422f339473318808616c7fb926c4
      size: 44805933
    - path: output/models/model.pt
      md5: c7a6c14dc3dc96868cb9f3b93d7d31ba
      size: 44811029
    - path: output/reports/train/default/params.yaml
      md5: 320abf8eddbae67cd6873f8d1e3bba81
      size: 2174
    - path: output/reports/train/default/predictions.json
      md5: ed5c6a014bf8fc8ee4aadacc3c5cb07c
      size: 2437716
    - path: output/reports/train/default/score_dict.json
      md5: 368af71ad6cf7bf06b64ffeb109a2da9
      size: 412
  attack:
    cmd: python -m deckard.layers.experiment attack
    deps:
    - path: output/data/data.pkl
      md5: 6503fed5d4e6cc1163898c0ab6a863dd
      size: 739680311
    - path: output/models/model.pt
      md5: 40384588691c0c813a1bd0406f0dd7b0
      size: 44811477
    params:
      params.yaml:
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 10
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar10
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.attack.AttackInitializer
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    name: torch_cifar10
                  sample:
                    random_state: 0
                    stratify: true
                  sklearn_pipeline:
                    preprocessor:
                      name: sklearn.preprocessing.StandardScaler
                      with_mean: true
                      with_std: true
                initialize:
                  clip_values:
                  - 0.0
                  - 1.0
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar10
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 3
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epoch: 20
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              data:
                _target_: deckard.base.data.Data
                generate:
                  name: torch_cifar10
                sample:
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              initialize:
                clip_values:
                - 0.0
                - 1.0
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar10
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 3
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epoch: 20
        data:
          _target_: deckard.base.data.Data
          generate:
            name: torch_cifar10
          sample:
            random_state: 0
            stratify: true
          sklearn_pipeline:
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: output
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                name: torch_cifar10
              sample:
                random_state: 0
                stratify: true
              sklearn_pipeline:
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0.0
              - 1.0
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              name: torch_cifar10
            sample:
              random_state: 0
              stratify: true
            sklearn_pipeline:
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 3
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 20
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: output/attacks/attack.pkl
      md5: aab66fe871d14945003859fa44125c75
      size: 123046
    - path: output/reports/attack/default/adv_predictions.json
      md5: 61d687b977e8c7e9404e69a690b244dd
      size: 2154
    - path: output/reports/attack/default/params.yaml
      md5: 5177666d7f2e1e55ccad8ab4b735ffc7
      size: 5175
    - path: output/reports/attack/default/score_dict.json
      md5: a918883cd746f147337e5e19146988a0
      size: 537
  attacks@ResNet18:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet18
      ++stage=attack ++hydra.sweeper.storage=sqlite:///ResNet18.db --config-name default.yaml
    deps:
    - path: attacks.sh
      md5: 6b79f7071f855be0ea09ad5602215c35
      size: 2746
    - path: models.sh
      md5: 9386478ad9795b80ec8ebc4abf1dbc81
      size: 1221
    - path: output/attacks/attack.pkl
      md5: 8d7c09d7bf7c7d759648942a99880c3f
      size: 123046
    - path: output/reports/attack/default/adv_predictions.json
      md5: fb5dee98575e0d67e0ab051cc0182ecf
      size: 2145
    - path: output/reports/attack/default/params.yaml
      md5: 5177666d7f2e1e55ccad8ab4b735ffc7
      size: 5175
    outs:
    - path: ResNet18.db
      md5: 5de89603f1f440df03669e79e0a7b414
      size: 360448
  attacks@ResNet34:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet34
      ++stage=attack ++hydra.sweeper.storage=sqlite:///ResNet34.db --config-name default.yaml
    deps:
    - path: attacks.sh
      md5: 2fbda0d22c03c74392639ffa29319023
      size: 3080
    - path: models.sh
      md5: cd924674997af182b42d07a08bbc9034
      size: 1431
    - path: output/reports/attack/default/score_dict.json
      md5: bd2742460f844eebe8bd411aa8ebd5de
      size: 530
    outs:
    - path: ResNet34.db
      md5: f3084028f22eb073b578c9eb81f6795c
      size: 159744
  attacks@ResNet50:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet50
      ++stage=attack ++hydra.sweeper.storage=sqlite:///ResNet50.db --config-name default.yaml
    deps:
    - path: attacks.sh
      md5: 6dd27be960da7b3e34c0281143ca30ba
      size: 2742
    - path: models.sh
      md5: 9386478ad9795b80ec8ebc4abf1dbc81
      size: 1221
    - path: output/attacks/attack.pkl
      md5: 6b7117801434d91c71e870a3922eea7e
      size: 123046
    - path: output/reports/attack/default/adv_predictions.json
      md5: 39344f99a210e0ecbcaa16e54cec9d4b
      size: 2147
    - path: output/reports/attack/default/params.yaml
      md5: 5177666d7f2e1e55ccad8ab4b735ffc7
      size: 5175
    outs:
    - path: ResNet50.db
      md5: 1e3b638560b7ee5e73c674d0e1eb0421
      size: 446464
  attacks@ResNet101:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet101
      ++stage=attack ++hydra.sweeper.storage=sqlite:///ResNet101.db --config-name
      default.yaml
    deps:
    - path: attacks.sh
      md5: 2fbda0d22c03c74392639ffa29319023
      size: 3080
    - path: models.sh
      md5: cd924674997af182b42d07a08bbc9034
      size: 1431
    - path: output/reports/attack/default/score_dict.json
      md5: bd2742460f844eebe8bd411aa8ebd5de
      size: 530
    outs:
    - path: ResNet101.db
      md5: 8a40cf29e97c400163c55d790153a270
      size: 307200
  attacks@ResNet152:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet152
      ++stage=attack ++hydra.sweeper.storage=sqlite:///ResNet152.db --config-name
      default.yaml
    deps:
    - path: attacks.sh
      md5: da51ec626ca4fa915be37e944ac5218b
      size: 2745
    - path: models.sh
      md5: 9386478ad9795b80ec8ebc4abf1dbc81
      size: 1221
    - path: output/attacks/attack.pkl
      md5: aab66fe871d14945003859fa44125c75
      size: 123046
    - path: output/reports/attack/default/adv_predictions.json
      md5: 61d687b977e8c7e9404e69a690b244dd
      size: 2154
    - path: output/reports/attack/default/params.yaml
      md5: 5177666d7f2e1e55ccad8ab4b735ffc7
      size: 5175
    outs:
    - path: ResNet152.db
      md5: 143435750b3f57d1a1280d412df74e0b
      size: 638976
  compile@attack:
    cmd: python -m deckard.layers.compile --report_folder output/reports/attack --results_file
      output/reports/attack.csv
    deps:
    - path: ResNet152.db
      md5: 143435750b3f57d1a1280d412df74e0b
      size: 638976
    - path: output/reports/attack/
      md5: aaa5e2c2628d1ebcb31556d983d7dece.dir
      size: 7965937508
      nfiles: 24265
    outs:
    - path: output/reports/attack.csv
      md5: f67172805501c6e8baffab2df49a960e
      size: 14782615
  plot:
    cmd: python plots.py --path output/plots/ --file output/reports/attack.csv
    deps:
    - path: output/reports/attack.csv
      md5: f67172805501c6e8baffab2df49a960e
      size: 14782615
    outs:
    - path: output/plots/adv_accuracy_vs_attack_type.pdf
      md5: 854e1515d4dfbca75c62215c19affcbf
      size: 26187
    - path: output/plots/adv_accuracy_vs_defence_type.pdf
      md5: c5b4a902835f96292049a467fca57041
      size: 21047
    - path: output/plots/adv_failure_rate_vs_train_time.pdf
      md5: 97a93d8a83c604fada1f33612181d760
      size: 35489
    - path: output/plots/adv_failures_per_test_time_vs_defence_type.pdf
      md5: b8d746d5bb13629a6b417840f1a2258c
      size: 26083
    - path: output/plots/adv_failures_per_train_time_vs_attack_type.pdf
      md5: e0d5438fd8d9ec90c37c113a5241995c
      size: 33150
    - path: output/plots/adv_failures_per_train_time_vs_defence_type.pdf
      md5: c64e113c5bb0018e2cae8c685dd8a826
      size: 27183
    - path: output/plots/atk_param_vs_accuracy.pdf
      md5: fd915ae17cdd61b00a2883d2a9af4dce
      size: 21699
    - path: output/plots/ben_accuracy_vs_defence_type.pdf
      md5: b3c0311a4b939d98701f2326a2bf6612
      size: 21731
    - path: output/plots/ben_failure_rate_vs_defence_type.pdf
      md5: 25dcc0c4e4289089c5f3c20916c41afb
      size: 26339
    - path: output/plots/ben_failures_per_train_time_vs_defence_type.pdf
      md5: a35bf0e15e751e92a03ee67d8f0fb612
      size: 26968
    - path: output/plots/data.csv
      md5: ba58e26a754134c3a028d9864072b64d
      size: 3267854
    - path: output/plots/def_param_vs_accuracy.pdf
      md5: 350ec78e47cecb84f6282fb8b3f4cb20
      size: 19273
    - path: output/plots/def_param_vs_adv_accuracy.pdf
      md5: 83824bc0a6b4f987eae04f6055208c40
      size: 18857
    - path: output/plots/def_param_vs_adv_failure_rate.pdf
      md5: b7dd47fde2b640c528f76535853eadbd
      size: 18820
  afr:
    cmd: python afr.py
    deps:
    - path: output/plots/data.csv
      md5: ba58e26a754134c3a028d9864072b64d
      size: 3267854
    outs:
    - path: output/plots/aft_comparison.csv
      md5: 184ae57d83a4ac6e291f5af968ea4a12
      size: 214
    - path: output/plots/aft_comparison.tex
      md5: 672fed1e5e8ce82c246945494b7a2ab4
      size: 458
    - path: output/plots/cox_aft.pdf
      md5: 9471fa8cd1fd918e84de193ba94db7b7
      size: 23765
    - path: output/plots/cox_partial_effects.pdf
      md5: 265d945de23c1a8869470c2d8625d9d3
      size: 37750
    - path: output/plots/log_logistic_aft.pdf
      md5: c54bed98e83ec16a4c05b9de79c7118e
      size: 28381
    - path: output/plots/log_logistic_partial_effects.pdf
      md5: de845fde8cd722c7aa3082863c04cf5f
      size: 28962
    - path: output/plots/log_normal_aft.pdf
      md5: c1655a624659c192485a3d235ed74313
      size: 28321
    - path: output/plots/log_normal_partial_effects.pdf
      md5: 9ba657c55fa26813a34dbe8b75ec3c85
      size: 28997
    - path: output/plots/weibull_aft.pdf
      md5: 007e308b6c2c1be0ba4cbfe9ad4c1092
      size: 26817
    - path: output/plots/weibull_partial_effects.pdf
      md5: a770dfeaa12d12028f24c69ca7e94ff1
      size: 30858
