schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train --config_file mnist.yaml
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 100
                train_size: 100
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 1
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: mnist/data/data.pkl
      hash: md5
      md5: 165a2c2fc0af6a07838b6c6715d79d53
      size: 635489
    - path: mnist/models/model.optimizer.pt
      hash: md5
      md5: e59d322dfc529eb122757d5ae7296f30
      size: 44779566
    - path: mnist/models/model.pt
      hash: md5
      md5: 074d2d5c705b521d785435daa385dca3
      size: 44785474
    - path: mnist/reports/train/default/predictions.json
      hash: md5
      md5: 6ec634a10c8d622e08f24f4cd42e0321
      size: 21195
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: dd888d6f81ce2caf914ce7f138ab3254
      size: 345
  attack:
    cmd: python -m deckard.layers.experiment attack --config_file mnist.yaml
    deps:
    - path: mnist/data/data.pkl
      hash: md5
      md5: 165a2c2fc0af6a07838b6c6715d79d53
      size: 635489
    - path: mnist/models/model.pt
      hash: md5
      md5: 074d2d5c705b521d785435daa385dca3
      size: 44785474
    params:
      params.yaml:
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 10
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.attack.AttackInitializer
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                    test_size: 100
                    train_size: 100
                  sklearn_pipeline:
                    _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                    preprocessor:
                      name: sklearn.preprocessing.StandardScaler
                      with_mean: true
                      with_std: true
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 100
                  train_size: 100
                sklearn_pipeline:
                  _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epoch: 1
            name: art.attacks.evasion.FastGradientMethod
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 100
                  train_size: 100
                sklearn_pipeline:
                  _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 100
                train_size: 100
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epoch: 1
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 100
                train_size: 100
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 1
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: mnist/attacks/attack.pkl
      hash: md5
      md5: c7fa6504624021688d4f773adea34f6f
      size: 31517
    - path: mnist/reports/attack/default/adv_predictions.json
      hash: md5
      md5: 6fdee6d0c74fd29417d346113c2c26ff
      size: 2124
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: fede2f60c3f7f4e2906fef933bec8fca
      size: 432
  attacks@ResNet18:
    cmd: bash attacks.sh ++attack.attack_size=100 ++model.init.name=torch_example.ResNet18
      stage=attack ++hydra.sweeper.storage=sqlite:///mnist/reports/attack/ResNet18.db
      --config-name mnist.yaml
    deps:
    - path: attacks.sh
      hash: md5
      md5: 0e9c2eaa696b28e79478fc38cea8806c
      size: 2931
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: 576000b39900ff17c854b12990cdaf57
      size: 502
    - path: models.sh
      hash: md5
      md5: 1937e58bedac027034aea7d4a5712407
      size: 1380
    outs:
    - path: mnist/reports/attack/ResNet18.db
      hash: md5
      md5: f95524164e99ab1e36ac701ff2b3eb3f
      size: 131072
  install_deckard:
    cmd: python -m pip install -e ../../ && python -m pip install torch torchvision
    deps:
    - path: ../../setup.py
      hash: md5
      md5: df6acc4b15670c55b1aa9f23f1cc892f
      size: 4886
    outs:
    - path: ../../deckard.egg-info
      hash: md5
      md5: 244a42d703838a2a3ffeb80ea7415b3f.dir
      size: 13515
      nfiles: 5
  install_torch:
    cmd: python -m pip install torch torchvision
  parse_params:
    cmd: python -m deckard.layers.parse --config_file mnist.yaml
    deps:
    - path: conf/
      hash: md5
      md5: fe0f04e3ae07d49692ed95770ee0ad30.dir
      size: 122038
      nfiles: 17
    outs:
    - path: params.yaml
      hash: md5
      md5: 957f64f33bec09a2b135fb641f494a50
      size: 7103
  install_redis:
    cmd: bash redis.sh
    outs:
    - path: .bashrc
      hash: md5
      md5: 088676c495eacf10a7b51ebf17c9012c
      size: 40
